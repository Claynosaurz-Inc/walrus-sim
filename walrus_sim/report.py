### walrus_sim/report.py

import json
import csv
from pathlib import Path
from datetime import datetime
import webbrowser
import sys
import subprocess

TAILWIND_CDN = "https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"

def open_html(path: Path):
    try:
        if not webbrowser.open(path.as_uri()):
            raise Exception("webbrowser fallback")
    except:
        try:
            if sys.platform == "darwin":
                subprocess.run(["open", path])
            elif sys.platform == "win32":
                os.startfile(path)
            elif sys.platform == "linux":
                subprocess.run(["xdg-open", path])
        except Exception as e:
            print(f"‚ö†Ô∏è Could not open browser: {e}")

def generate_summary_files(path: Path, results, errors, totals, metadata=None):
    now = datetime.utcnow().isoformat()
    
    # JSON summary
    summary = {
        "timestamp": now,
        "processed": len(results),
        "errors": len(errors),
        "totalUnencodedSize": totals["unencoded"],
        "totalEncodedSize": totals.get("encoded", totals["unencoded"]),
        "totalStorageCost": totals["cost"],
        "totalUnencodedSize_GB": totals["unencoded"] / (1024**3),
        "totalEncodedSize_GB": totals.get("encoded", totals["unencoded"]) / (1024**3),
        "totalStorageCost_WAL": totals["cost"] / 1_000_000_000,
    }

    if "duplicateBlobIds" in totals:
        summary.update({
            "totalBlobIds": totals["totalBlobIds"],
            "uniqueBlobIds": totals["uniqueBlobIds"],
            "duplicateBlobIds": totals["duplicateBlobIds"],
            "hasDuplicates": totals["hasDuplicates"]
        })

    with open(path / "storage_summary.json", "w") as f:
        json.dump(summary, f, indent=2)

    if errors:
        with open(path / "storage_errors.json", "w") as f:
            json.dump(errors, f, indent=2)

    # Optional metadata log
    if metadata:
        metadata.update(summary)
        log_name = f"storage_run_{now.replace(':', '-').replace('.', '-')}.json"
        with open(path / log_name, "w") as f:
            json.dump(metadata, f, indent=2)

    # CSV output
    with open(path / "storage_summary.csv", "w", newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=["name", "blobId", "size", "cost", "sharedBlobObject"])
        writer.writeheader()
        for row in results:
            writer.writerow({
                "name": row.get("name", Path(row.get("img_path", "")).name),
                "blobId": row["blobId"],
                "size": row.get("size", row.get("unencodedSize")),
                "cost": row.get("cost", row.get("storageCost")),
                "sharedBlobObject": row.get("sharedBlobObject", "")
            })

    # Generate blobId table data
    paginated_data = [
        {
            "name": row.get("name", Path(row.get("img_path", "")).name),
            "sizeBytes": row.get("size", row.get("unencodedSize")),
            "sizeGB": round(row.get("size", row.get("unencodedSize")) / (1024 ** 3), 3),
            "costFROST": row.get("cost", row.get("storageCost")),
            "costWAL": round(row.get("cost", row.get("storageCost")) / 1_000_000_000, 6),
            "blobId": row["blobId"],
            "size": row.get("size", row.get("unencodedSize")),
            "cost": row.get("cost", row.get("storageCost")),
            "shared": row.get("sharedBlobObject", "")
        }
        for row in results
    ]

    # HTML report
    html = f"""
    <!DOCTYPE html>
    <html lang=\"en\">
    <head>
        <meta charset=\"UTF-8\">
        <link href=\"{TAILWIND_CDN}\" rel=\"stylesheet\">
        <title>Storage Summary</title>
        <script>
            // Auto-generated by walrus-sim
const data = {json.dumps(paginated_data)};
            let page = 1;
            const perPage = 15;

            function renderTable() {{
                const start = (page - 1) * perPage;
                const end = start + perPage;
                const rows = data.slice(start, end).map(row => `
                  <tr>
                    <td class='border px-4 py-2'>${{row.name}}</td>
                    <td class='border px-4 py-2 text-xs break-all'>${{row.blobId}}</td>
                    <td class='border px-4 py-2'>${{(row.size / 1073741824).toFixed(3)}} GB</td>
                    <td class='border px-4 py-2'>${{(row.cost / 1_000_000_000).toFixed(3)}} WAL</td>
                    <td class='border px-4 py-2 text-xs'>${{row.shared || ''}}</td>
                  </tr>`).join('');
                document.getElementById('blobid-table').innerHTML = rows;
                document.getElementById('page-indicator').textContent = `Page ${{page}} of ${{Math.ceil(data.length / perPage)}}`;
            }}

            function prevPage() {{ if (page > 1) {{ page--; renderTable(); }} }}
            function nextPage() {{ if (page * perPage < data.length) {{ page++; renderTable(); }} }}

            document.addEventListener('DOMContentLoaded', renderTable);
        </script>
    </head>
    <body class=\"bg-gray-100 text-gray-900 p-10\">
        <div class=\"max-w-6xl mx-auto bg-white shadow-xl rounded-xl p-8\">
            <h1 class=\"text-3xl font-bold mb-6\">Walrus Storage Summary</h1>
            <ul class=\"grid grid-cols-2 gap-4 text-lg\">
                <li><strong>Timestamp:</strong> {now}</li>
                <li><strong>Processed:</strong> {summary['processed']}</li>
                <li><strong>Errors:</strong> {summary['errors']}</li>
                <li><strong>Unencoded Size:</strong> {summary['totalUnencodedSize_GB']:.2f} GB</li>
                <li><strong>Encoded Size:</strong> {summary['totalEncodedSize_GB']:.2f} GB</li>
                <li><strong>Total Cost:</strong> {summary['totalStorageCost_WAL']:.2f} WAL</li>
    """

    if "hasDuplicates" in summary:
        html += f"""
            <li><strong>Blob IDs:</strong> {summary['totalBlobIds']}</li>
            <li><strong>Unique Blob IDs:</strong> {summary['uniqueBlobIds']}</li>
            <li><strong>Duplicates:</strong> {summary['duplicateBlobIds']}</li>
            <li><strong>Has Duplicates:</strong> {'‚úÖ' if summary['hasDuplicates'] else '‚ùå'}</li>
        """

    html += """
            </ul>
    """

    if metadata:
        html += "<hr class=\"my-6\"><h2 class=\"text-xl font-bold mb-2\">Run Metadata</h2><pre class=\"bg-gray-100 p-4 rounded\">"
        html += json.dumps(metadata, indent=2).replace("<", "&lt;").replace(">", "&gt;")
        html += "</pre>"

    html += """
            <hr class=\"my-6\">
            <h2 class=\"text-xl font-bold mb-2\">Stored Image Details</h2>
            <div class=\"overflow-x-auto\">
                <table class=\"table-auto w-full text-sm border-collapse border\">
                    <thead>
                        <tr>
                            <th class=\"border px-4 py-2\">Image Name</th>
                            <th class=\"border px-4 py-2\">Blob ID</th>
                            <th class=\"border px-4 py-2\">Size (GB)</th>
                            <th class=\"border px-4 py-2\">Cost (WAL)</th>
                            <th class=\"border px-4 py-2\">Shared Object</th>
                        </tr>
                    </thead>
                    <tbody id=\"blobid-table\"></tbody>
                </table>
                <div class=\"flex justify-between mt-4\">
                    <button onclick=\"prevPage()\" class=\"bg-blue-500 text-white px-4 py-2 rounded\">Previous</button>
                    <span id=\"page-indicator\"></span>
                    <button onclick=\"nextPage()\" class=\"bg-blue-500 text-white px-4 py-2 rounded\">Next</button>
                </div>
            </div>
        </div>
    </body>
    </html>
    """

    html_path = path / "storage_summary.html"
    with open(html_path, "w") as f:
        f.write(html)

    # Automatically open the HTML report in browser
    webbrowser.open(str(html_path))
    print(f"\nüìÑ Summary saved to: {html_path.resolve()}")
    open_html(html_path)

